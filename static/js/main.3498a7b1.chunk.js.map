{"version":3,"sources":["webcomponents/my-resume.js","App.js","serviceWorker.js","index.js"],"names":["MyResume","isLoading","isError","url","type","String","hasChanged","newVal","oldVal","data","Object","json","Boolean","name","oldValue","newValue","this","loadResume","fetch","then","s","a","catch","err","finally","keys","map","propName","index","getHtmlContent","propType","html","Array","isArray","p","getFullCollection","console","log","DataTemplate","LitElement","customElements","define","App","props","onShowResume","e","setState","urlInput","value","React","createRef","state","className","defaultValue","ref","placeholder","onClick","Component","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"++HACMA,E,YAeF,aAAe,IAAD,8BACV,+CACKC,WAAY,EACjB,EAAKC,SAAU,EAHL,E,6EAbV,MAAO,CACHC,IAAK,CACDC,KAAMC,OACNC,WAFC,SAEUC,EAAQC,GACf,OAAOD,IAAWC,IAG1BC,KAAM,CAAEL,KAAMM,QACdC,KAAM,CAAEP,KAAMM,QACdT,UAAW,CAAEG,KAAMQ,SACnBV,QAAS,CAAEE,KAAMQ,c,8DAQAC,EAAMC,EAAUC,GACrC,gFAA+BF,EAAMC,EAAUC,GAClC,QAATF,GAAkBE,GAAYA,IAAaD,GAC3CE,KAAKC,WAAWF,K,iCAGbZ,GAAM,IAAD,OACRA,IACAa,KAAKf,WAAY,EACjBe,KAAKd,SAAU,EACfgB,MAAMf,GACDgB,KADL,uCACU,WAAOC,GAAP,SAAAC,EAAA,sEACgBD,EAAET,OADlB,OACF,EAAKA,KADH,kDADV,uDAIKW,OAAM,SAAAC,GACH,EAAKrB,SAAU,KAElBsB,SAAQ,WACL,EAAKvB,WAAY,Q,wCAafQ,GAAO,IAAD,OACpB,OAAOC,OAAOe,KAAKhB,GAAMiB,KAAI,SAACC,EAAUC,GACpC,OAAO,EAAKC,eAAeF,EAAUlB,EAAKkB,S,qCAGnCA,EAAUlB,GAAO,IAAD,OACrBqB,SAAmBrB,EACzB,MAAiB,WAAbqB,EACOC,YAAP,IAEiDJ,EACLlB,GAG1B,WAAbqB,EACDE,MAAMC,QAAQxB,GACPsB,YAAP,IAEiCJ,EAI7BlB,EAAKiB,KAAI,SAAAQ,GACL,OAAO,EAAKC,kBAAkBD,OAO/BH,YAAP,IAE6BJ,EAIzBX,KAAKmB,kBAAkB1B,SAtB9B,I,+BAkCL,OADA2B,QAAQC,IAAIrB,KAAKb,KACV4B,YAAP,IAmDYf,KAAKf,UACT8B,YADI,KAEJf,KAAKd,QACD6B,YADJ,KAEOf,KAAKsB,gB,mCA/GpB,OAAItB,KAAKL,KACEoB,YAAP,IAEQf,KAAKmB,kBAAkBnB,KAAKL,OAG1BoB,YAAP,S,GAjDQQ,KA8JvBC,eAAeC,OAAO,YAAazC,G,ICxHpB0C,E,YAnCb,WAAYC,GAAQ,IAAD,8BACjB,4CAAMA,KAIRC,aAAe,SAACC,GACd,EAAKC,SAAS,CAAE3C,IAAK,EAAK4C,SAASC,SAJnC,EAAKD,SAAWE,IAAMC,YACtB,EAAKC,MAAQ,CAAEhD,IAAK,4CAHH,E,sEAQT,IAAD,OACP,OACE,yBAAKiD,UAAU,aACb,4DAEA,6BACA,yBAAKA,UAAU,OACb,yBAAKA,UAAU,YACb,yBAAKA,UAAU,cAEb,2BAAOA,UAAU,eAAeC,aAAcrC,KAAKmC,MAAMhD,IAAKmD,IAAK,SAAAT,GAAC,OAAI,EAAKE,SAAWF,GAAGU,YAAY,kCACvG,+BAGJ,yBAAKH,UAAU,sBACb,4BAAQI,QAASxC,KAAK4B,aAAcQ,UAAU,mBAA9C,iBAGJ,6BACE,+BAAWjD,IAAKa,KAAKmC,MAAMhD,Y,GA5BnB8C,IAAMQ,WCSJ7C,QACW,cAA7B8C,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD4H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBjD,MAAK,SAAAkD,GACJA,EAAaC,gBAEdhD,OAAM,SAAAiD,GACLnC,QAAQmC,MAAMA,EAAMC,c","file":"static/js/main.3498a7b1.chunk.js","sourcesContent":["import { LitElement, html } from '@polymer/lit-element';\r\nclass MyResume extends LitElement {\r\n    static get properties() {\r\n        return {\r\n            url: {\r\n                type: String,\r\n                hasChanged(newVal, oldVal) {\r\n                    return newVal !== oldVal;\r\n                }\r\n            },\r\n            data: { type: Object },\r\n            json: { type: Object },\r\n            isLoading: { type: Boolean },\r\n            isError: { type: Boolean },\r\n        };\r\n    }\r\n    constructor() {\r\n        super();\r\n        this.isLoading = false;\r\n        this.isError = false;\r\n    }\r\n    attributeChangedCallback(name, oldValue, newValue) {\r\n        super.attributeChangedCallback(name, oldValue, newValue);\r\n        if (name === 'url' && newValue && newValue !== oldValue) {\r\n            this.loadResume(newValue);\r\n        }\r\n    }\r\n    loadResume(url) {\r\n        if (url) {\r\n            this.isLoading = true;\r\n            this.isError = false;\r\n            fetch(url)\r\n                .then(async (s) => {\r\n                    this.json = await s.json();\r\n                })\r\n                .catch(err => {\r\n                    this.isError = true;\r\n                })\r\n                .finally(() => {\r\n                    this.isLoading = false;\r\n                });\r\n        }\r\n    }\r\n    get DataTemplate() {\r\n        if (this.json) {\r\n            return html`\r\n                <div class='resume-container'>\r\n                 ${ this.getFullCollection(this.json)}\r\n                </div>\r\n        `;\r\n        } else return html``;\r\n    }\r\n    getFullCollection(data) {\r\n        return Object.keys(data).map((propName, index) => {\r\n            return this.getHtmlContent(propName, data[propName]);\r\n        });\r\n    }\r\n    getHtmlContent(propName, data) {\r\n        const propType = typeof (data);\r\n        if (propType === 'string')\r\n            return html`\r\n                    <div class='item'>\r\n                            <div><label class='field-name'>${propName}</label></div>\r\n                            <div  class='field-value'>${data}</div>\r\n                    </div>\r\n                `;\r\n        else if (propType === 'object') {\r\n            if (Array.isArray(data)) {\r\n                return html`<div class='list'>\r\n                        <hr/>\r\n                        <h3 class='field-name'>${propName}</h3>\r\n                        <hr/>\r\n                        <div class='list-items'>\r\n                        ${\r\n                    data.map(p => {\r\n                        return this.getFullCollection(p)\r\n                    })\r\n                    }\r\n                        </div>\r\n                        <br/><br/>\r\n                    </div>`;\r\n            } else {\r\n                return html`<div class='object'>\r\n                    <hr/>\r\n                    <h3 class='field-name'>${propName}</h3>\r\n                    <hr/>\r\n                    <div class='object-items'>\r\n                        ${\r\n                    this.getFullCollection(data)\r\n                    }\r\n                    </div>\r\n                        <br/><br/>\r\n                        </div>\r\n                </div>`;\r\n            }\r\n        }\r\n\r\n    }\r\n    render() {\r\n        console.log(this.url);\r\n        return html`\r\n            <style>\r\n            .resume-container{\r\n                padding: 10px;\r\n                border: 1px solid #CCC;\r\n                BORDER-RADIUS: 6PX;\r\n                border-top: none;\r\n            }\r\n             .field-name{\r\n                 font-weight:bold;\r\n                 text-transform: capitalize;\r\n                 color: gray;\r\n             }\r\n             h3.field-name{\r\n                text-align: left;\r\n                font-size: 24px;\r\n                padding-left: 30px;\r\n                color: navy;\r\n             }\r\n             hr{\r\n                border: 0;\r\n                width  :100%;\r\n                height: 1px;\r\n                background: #333;\r\n                background: -webkit-gradient(linear, left top, right top, color-stop(0%,hsla(0,0%,0%,0)), color-stop(50%,hsla(0,0%,0%,.75)), color-stop(100%,hsla(0,0%,0%,0)));\r\n                background: -webkit-linear-gradient(left, hsla(0,0%,0%,0) 0%, hsla(0,0%,0%,.75) 50%, hsla(0,0%,0%,0) 100%);\r\n                background:    -moz-linear-gradient(left, hsla(0,0%,0%,0) 0%, hsla(0,0%,0%,.75) 50%, hsla(0,0%,0%,0) 100%);\r\n                background:     -ms-linear-gradient(left, hsla(0,0%,0%,0) 0%, hsla(0,0%,0%,.75) 50%, hsla(0,0%,0%,0) 100%);\r\n                background:      -o-linear-gradient(left, hsla(0,0%,0%,0) 0%, hsla(0,0%,0%,.75) 50%, hsla(0,0%,0%,0) 100%);\r\n                background:         linear-gradient(left, hsla(0,0%,0%,0) 0%, hsla(0,0%,0%,.75) 50%, hsla(0,0%,0%,0) 100%);\r\n             }\r\n             .field-value{\r\n                 font-style:italic;\r\n                 font-size:70%;\r\n                 color: gray;\r\n             }\r\n             .list-items{\r\n                padding: 10px 0px 0px 50px;\r\n                display: inline-block;\r\n                width: 100%;\r\n                margin-bottom: 10px;\r\n             }\r\n             .object-items{\r\n                 padding-left:50px;\r\n             }\r\n             .item{\r\n                 margin-bottom:10px;\r\n                 float: left;\r\n                width: 50%;\r\n             }\r\n            </style>\r\n            <div>${ this.isLoading ?\r\n                html`<span>Loading...</span>` :\r\n                this.isError ?\r\n                    html`<span>some error occured, please try again</span>`\r\n                    : (this.DataTemplate)}</div>\r\n        `;\r\n    }\r\n}\r\ncustomElements.define('my-resume', MyResume);","import React from 'react';\r\nimport './App.css';\r\nimport './webcomponents/my-resume';\r\nclass App extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.urlInput = React.createRef();\r\n    this.state = { url: \"https://demo9617924.mockable.io/myresume\" };\r\n  }\r\n  onShowResume = (e) => {\r\n    this.setState({ url: this.urlInput.value });\r\n  }\r\n  render() {\r\n    return (\r\n      <div className=\"container\">\r\n        <h1>\r\n          WebComponents inside ReactJs</h1>\r\n        <br />\r\n        <div className='row'>\r\n          <div className='col-sm-6'>\r\n            <div className=\"form-group\">\r\n\r\n              <input className=\"form-control\" defaultValue={this.state.url} ref={e => this.urlInput = e} placeholder='Enter Resume JSON url here...' />\r\n              <br />\r\n            </div>\r\n          </div>\r\n          <div className='col-sm-6 text-left'>\r\n            <button onClick={this.onShowResume} className=\"btn btn-primary\">Load Resume</button>\r\n          </div>\r\n        </div>\r\n        <div>\r\n          <my-resume url={this.state.url}></my-resume>\r\n        </div>\r\n\r\n      </div >\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import 'bootstrap/dist/css/bootstrap.css';\r\nimport React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}